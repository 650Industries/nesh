{"name":"Nesh","tagline":"An enhanced, extensible, embeddable interactive shell for Node.js","body":"Node Enhanced Shell\r\n===================\r\nAn enhanced extensible interactive interpreter (REPL) for Node.js and languages that compile to Javascript, like CoffeeScript. Some features:\r\n\r\n * Lightweight & fast\r\n * Built-in convenience functions\r\n * Easily extensible interactive environment\r\n * Asyncronous plugin architecture\r\n * Multi-language support (e.g. CoffeeScript)\r\n\r\n[![Dependency Status](https://gemnasium.com/danielgtaylor/nesh.png)](https://gemnasium.com/danielgtaylor/nesh) [![Build Status](https://travis-ci.org/danielgtaylor/nesh.png?branch=master)](https://travis-ci.org/danielgtaylor/nesh)\r\n\r\nInstallation\r\n------------\r\nYou can install and start using `nesh` with `npm` (note: you may need to use `sudo` to install globally):\r\n\r\n```bash\r\nnpm install -g nesh\r\n\r\n# Run nesh\r\nnesh\r\n\r\n# Run nesh with CoffeeScript\r\nnpm install -g coffee-script\r\nnesh -c\r\n```\r\n\r\nIf you wish to use `nesh` within your own project with `require 'nesh'` (i.e. to embed within your app) you can use the following non-global install instead:\r\n\r\n```bash\r\nnpm install nesh\r\n```\r\n\r\nBasic Usage\r\n-----------\r\nThe `nesh` command starts an interactive interpreter with a default set of plugins loaded. You can type commands and they will be executed, with the output or any errors displayed below the command.\r\n\r\n### Command Help\r\nYou can get a list of options and help via:\r\n\r\n```bash\r\nnesh --help\r\n```\r\n\r\n### Setting a Language\r\nNesh supports multiple languages, and ships with CoffeeScript support out of the box. To select a language:\r\n\r\n```bash\r\nnesh --language coffee\r\n```\r\n\r\nYou can get a list of supported built-in languages via:\r\n\r\n```bash\r\nnesh --list-languages\r\n```\r\n\r\nAs a shortcut for CoffeeScript, you can also use `nesh -c`. It's also pretty easy to set up an alias for this, e.g. `alias cs='nesh -c'` in bash.\r\n\r\n### Setting a Prompt & Welcome Message\r\nA prompt can be set with the `--prompt` parameter, e.g. `nesh --prompt \"test> \"`. The welcome message can be set the same way with the `--welcome` parameter. You can disable the welcome message via e.g. `nesh --no-welcome`.\r\n\r\n### Preloading Code\r\nYou can preload a script with the `--eval` option, which will evaluate either a file or string in the context of the interpreter, so anything you define will be available in the interpreter after startup. This is similar to using `ipython -i script.py`.\r\n\r\n```bash\r\necho 'var hello = function (name) { return \"Hello, \" + name; }' >hello.js\r\nnesh --eval hello.js\r\n```\r\n\r\nNow you can run `hello('world');` in the interpreter. A string can also be used:\r\n\r\n```bash\r\nnesh --eval \"var test = 1;\"\r\n```\r\n\r\nLanguages other than Javascript can also be used. When using a non-Javascript language, the code loaded will use that language's compile function before running. For example:\r\n\r\n```bash\r\nnesh -c -e hello.coffee\r\n```\r\n\r\nConvenience Functions\r\n---------------------\r\nWhen run from the `nesh` command several built-in convenience functions are available.\r\n\r\n### Hashing\r\n\r\n#### md5 (value)\r\nReturn an MD5 hash of a value as a hexadecimal string.\r\n\r\n#### sha (value)\r\nReturn a SHA1 hash of a value as a hexadecimal string.\r\n\r\n### Random\r\n\r\n#### rand ([start], [end])\r\nGenerate a random number. If neither `start` nor `end` are given, it returns a number between 0 and 1. If only `start` is given, a number between 0 and `start` is returned. Otherwise, a number between `start` and `end` is returned.\r\n\r\n#### randChoices (choices, [length])\r\nSelect an array of random choices of length `length` from an array `choices`.\r\n\r\n#### randString (length, [charSet])\r\nReturn a random string with characters selected from `charSet`, which defaults to case-sensitive alphanumeric characters.\r\n\r\n#### randHex (length)\r\nReturn a random lowercase hexadecimal string.\r\n\r\nEmbedding the Interpreter\r\n-------------------------\r\nThe Nesh interpreter can be embedded into your application, whether it is written in Javascript, Coffeescript, or another language that runs on Node. For example, to start an interactive CoffeeScript session on stdin/stdout from Javascript with a custom prompt and welcome message:\r\n\r\n```javascript\r\nnesh = require('nesh');\r\n\r\nopts = {\r\n    welcome: 'Welcome!',\r\n    prompt: 'test> ',\r\n    inputStream: process.stdin,\r\n    outputStream: process.stdout\r\n};\r\n\r\nnesh.loadLanguage('coffee');\r\n\r\nnesh.start(opts, function (err) {\r\n    if (err) {\r\n        console.log(err);\r\n    }\r\n});\r\n```\r\n\r\n### Embedding Reference\r\n\r\n#### nesh.defaults\r\nAn object containing default values that are set when no such value is passed to `nesh.start`'s `opts` parameter.\r\n\r\n#### nesh.languages ()\r\nGet a list of supported built-in languages that can be passed as strings to `nesh.loadLanguage`.\r\n\r\n#### nesh.loadLanguage (name)\r\nLoad a language to be interpreted, e.g. `coffee` for CoffeeScript.\r\n\r\n#### nesh.loadPlugin (plugin)\r\nLoads a plugin - see below in the Extending the Interpreter section for details.\r\n\r\n#### nesh.start ([opts], [callback])\r\nCreate a new nesh REPL with the passed options `opts`. Allowed options include the defaults from the Node REPL module (http://nodejs.org/api/repl.html) as well as the following:\r\n\r\n * `welcome` A welcome message to be displayed on startup\r\n * `evalData` A javascript string to execute within the REPL context on startup\r\n\r\nExtending the Interpreter\r\n-------------------------\r\nThe Nesh interpreter can be easily extended with new languages and plugins.\r\n\r\nLanguages can be added using the `nesh.loadLanguage` function. New languages should override `nesh.compile` and `nesh.repl` to provide a Node REPL-like interface with a `start` function. For example:\r\n\r\n```coffeescript\r\nnesh = require 'nesh'\r\n\r\nnesh.loadLanguage (neshRef) ->\r\n    neshRef.compile = (data) ->\r\n        # Compile to js here\r\n    neshRef.repl =\r\n        start: (opts, next) ->\r\n            # Do stuff here!\r\n    neshRef.defaults.welcome = 'Welcome to my interpreter!'\r\n\r\nnesh.start (err) ->\r\n    console.log err if err\r\n```\r\n\r\nPlugins may define `setup`, `preStart`, and `postStart` functions that are called when the plugin is loaded, before a REPL is created, and after a REPL has been created respectively. Plugins are loaded via the `nesh.loadPlugin` function. A very simple example plugin written in CoffeeScript might look like this:\r\n\r\n```coffeescript\r\nnesh = require 'nesh'\r\nutil = require 'util'\r\n\r\nmyPlugin =\r\n    setup: (defaults) ->\r\n        console.log 'Setting up my plugin! Defaults:'\r\n        console.log util.inspect defaults\r\n\r\n    preStart: (opts) ->\r\n        console.log 'About to start the interpreter with these options:'\r\n        console.log util.inspect opts\r\n\r\n    postStart: (repl) ->\r\n        console.log 'Interpreter started! REPL:'\r\n        console.log util.inspect repl\r\n\r\nnesh.loadPlugin myPlugin, (err) ->\r\n    console.log err if err\r\n\r\n    nesh.start (err) ->\r\n        console.log err if err\r\n```\r\n\r\nSeveral plugins ship with Nesh, just take a look at the `src/plugins` directory. If these ever need to be removed then you can do so by accessing the `nesh.plugins` array.\r\n\r\n### Asyncronous Plugins\r\nSometimes, a plugin may take actions that must run asyncronously. To support these cases, each of the plugin's functions can take a callback parameter `next` which must be called when finished. For example, if we were loading the welcome message's default value from a database with an asyncronous call:\r\n\r\n```coffeescript\r\nmyPlugin =\r\n    setup: (defaults, next) ->\r\n        mongodb.findOne name: 'defaultWelcome', (err, item) ->\r\n            return next(err) if err\r\n\r\n            defaults.welcome = item.message\r\n            next()\r\n```\r\n\r\n### Default Plugins\r\nNesh ships with several default plugins:\r\n\r\n * `builtins` Adds built-in convenience functions to the global context\r\n * `eval` Evaluates javascript in `opts.evalData` in the context of the REPL\r\n * `version` Adds a `.versions` command to show Node, Nesh, and language versions\r\n * `welcome` Adds a welcome message to the interactive interpreter via `opts.welcome`\r\n\r\n### Plugin Reference\r\n\r\n#### Plugin.setup (defaults, [next])\r\nCalled when the plugin is first loaded. The `defaults` passed in are an object containing default values that will be used to initialize the interpreter when `nesh.start` is called. If `next` is defined, then the function is treated as asyncronous and `next` will be passed a function that must be called when finished. If an error occurs, then the error should be passed to `next`.\r\n\r\nThis is a good place to add or modify default values.\r\n\r\n#### Plugin.preStart (opts, [next])\r\nCalled when `nesh.start` has been called but before the REPL is created and started. The `opts` passed in are a merged object made from the Nesh defaults and any options passed to `nesh.start`. If `next` is defined, then the function is treated as asyncronous and `next` will be passed a function that must be called when finished. If an error occurs, then the error should be passed to `next`.\r\n\r\nThis is a good place to print out information or modify the passed in options before they are sent to the REPL.\r\n\r\n#### Plugin.postStart (repl, [next])\r\nCalled when `nesh.start` has been called and the REPL is started. The `repl` passed in is the newly created and started REPL from the `nesh.start` call and includes the `opts` from above as `repl.opts`. If `next` is defined, then the function is treated as asyncronous and `next` will be passed a function that must be called when finished. If an error occurs, then the error should be passed to `next`.\r\n\r\nThis is a good place to modify the REPL, e.g. adding new commands, modifying history, listening for specific key strokes, etc.\r\n\r\nDevelopment\r\n-----------\r\nNesh development is easy! Just grab the source with git and start hacking around. Contributions, especially interesting languages and plugins, are always welcome!\r\n\r\n### Building\r\nAfter making changes it is important to run a build step to generate the Javascript which gets loaded when you import the `nesh` module, which makes it work across all Node languages.\r\n\r\n```bash\r\ncake build\r\n```\r\n\r\n### Running a local `nesh`\r\nYou can run the `nesh` command from your local checkout:\r\n\r\n```bash\r\n./bin/nesh.js\r\n```\r\n\r\nIt is also possible to use `npm` to link your local checkout globally (note: this may require `sudo`):\r\n\r\n```bash\r\nnpm link\r\n```\r\n\r\nNow you should be able to run `nesh` from anywhere and have it use your development version.\r\n\r\n### Unit Tests\r\nThe unit test suite can be run via the following:\r\n\r\n```bash\r\ncake test\r\n```\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2013 Daniel G. Taylor\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}